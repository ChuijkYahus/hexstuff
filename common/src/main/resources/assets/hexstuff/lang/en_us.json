{
  "hexcasting.spell.hexstuff:regex/make": "Thompson's Purification",
  "hexcasting.spell.hexstuff:regex/match": "Haystack Distillation",
  "hexcasting.spell.hexstuff:regex/flag/case_insensitive": "Typesetter's Distillation",
  "hexcasting.spell.hexstuff:regex/flag/dotall": "Orator's Distillation",
  "hexcasting.spell.hexstuff:regex/flag/multiline": "Essayist's Distillation",
  "hexstuff.entry.regex": "Regular Expressions",
  "hexstuff.page.regex.0": "I've read tales of grand mages using arcane and inscrutable strings of characters understood by Nature known as a regular expression, representing a certain pattern in text for Nature to find.$(br)I believe I have found the texts describing the syntax of this language $(l:https://github.com/google/re2/wiki/Syntax)here$().$(br2)$(o)Have you tried using an XML parser instead?$()",
  "hexstuff.page.regex.make": "Creates a regular expression based on the provided string.",
  "hexstuff.page.regex.match": "Finds all matches of the regular expression in the string. Each element of the resulting list is a match, each match being a list of its capture groups, with group 0 being the whole match.",
  "hexstuff.page.regex.flag.case_insensitive": "Sets or clears the $(bold)i$() flag, which makes the regular expression be case-insensitive when set.",
  "hexstuff.page.regex.flag.dotall": "Sets or clears the $(bold)s$() flag, which makes a $(bold).$() able to match a newline when set.",
  "hexstuff.page.regex.flag.multiline": "Sets or clears the $(bold)m$() flag, which makes $(bold)^$() and $(bold)$$() match the start and end of a line when set.",
  "hexcasting.mishap.invalid_value.class.regex": "a regular expression",
  "hexcasting.mishap.invalid_value.invalid_regex": "a valid regular expression"
}